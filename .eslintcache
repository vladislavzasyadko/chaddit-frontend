[{"/home/vlad/chaddit-frontend/src/api/api.js":"1","/home/vlad/chaddit-frontend/src/redux/reducers/userReducer.js":"2","/home/vlad/chaddit-frontend/src/components/Feed/Feed.jsx":"3","/home/vlad/chaddit-frontend/src/components/Card/Card.jsx":"4","/home/vlad/chaddit-frontend/src/components/Header/HeaderUtils/CreateThreadWidget/CreateThreadWidget.jsx":"5","/home/vlad/chaddit-frontend/src/components/ActiveCard/ActiveCard.jsx":"6","/home/vlad/chaddit-frontend/src/App.js":"7","/home/vlad/chaddit-frontend/src/redux/reducers/topicReducer.js":"8","/home/vlad/chaddit-frontend/src/redux/reducers/types.js":"9","/home/vlad/chaddit-frontend/src/commons/colors.js":"10","/home/vlad/chaddit-frontend/src/components/ActiveCard/components/Comment.jsx":"11","/home/vlad/chaddit-frontend/src/redux/reducers/threadReducer.js":"12","/home/vlad/chaddit-frontend/src/reportWebVitals.js":"13","/home/vlad/chaddit-frontend/src/hoc/PrivateRoute.jsx":"14","/home/vlad/chaddit-frontend/src/components/Header/Header.jsx":"15","/home/vlad/chaddit-frontend/src/redux/store.js":"16","/home/vlad/chaddit-frontend/src/redux/reducers/postsReducer.js":"17","/home/vlad/chaddit-frontend/src/components/Header/Logo.jsx":"18","/home/vlad/chaddit-frontend/src/components/Header/Search/Search.jsx":"19","/home/vlad/chaddit-frontend/src/utils/formatters.js":"20","/home/vlad/chaddit-frontend/src/components/Login/Login.jsx":"21","/home/vlad/chaddit-frontend/src/CONSTANTS/API_CONSTANTS.js":"22","/home/vlad/chaddit-frontend/src/components/Header/HeaderUtils/UserSettings/UserSettings.jsx":"23","/home/vlad/chaddit-frontend/src/redux/reducers/authReducer.js":"24","/home/vlad/chaddit-frontend/src/components/Topics/Topic/Topic.jsx":"25","/home/vlad/chaddit-frontend/src/components/Topics/Topics.jsx":"26","/home/vlad/chaddit-frontend/src/index.js":"27","/home/vlad/chaddit-frontend/src/redux/reducers/searchReducer.js":"28","/home/vlad/chaddit-frontend/src/components/Chats/Chats.jsx":"29","/home/vlad/chaddit-frontend/src/components/Chats/Chat/Chat.jsx":"30","/home/vlad/chaddit-frontend/src/redux/reducers/chatReducer.js":"31","/home/vlad/chaddit-frontend/src/components/Header/HeaderUtils/utils.js":"32","/home/vlad/chaddit-frontend/src/components/Users/Users.jsx":"33","/home/vlad/chaddit-frontend/src/components/Topics/Topic/AdminTopic.jsx":"34","/home/vlad/chaddit-frontend/src/redux/reducers/adminReducer.js":"35","/home/vlad/chaddit-frontend/src/components/Users/User/User.jsx":"36","/home/vlad/chaddit-frontend/src/components/ActiveCard/AdminThread.jsx":"37"},{"size":6034,"mtime":1616064169966,"results":"38","hashOfConfig":"39"},{"size":2597,"mtime":1614250447423,"results":"40","hashOfConfig":"39"},{"size":2852,"mtime":1616064268620,"results":"41","hashOfConfig":"39"},{"size":2426,"mtime":1616063231652,"results":"42","hashOfConfig":"39"},{"size":5344,"mtime":1616345100666,"results":"43","hashOfConfig":"39"},{"size":4503,"mtime":1609016865802,"results":"44","hashOfConfig":"39"},{"size":1188,"mtime":1614090017172,"results":"45","hashOfConfig":"39"},{"size":2126,"mtime":1616345029031,"results":"46","hashOfConfig":"39"},{"size":1619,"mtime":1614258083378,"results":"47","hashOfConfig":"39"},{"size":598,"mtime":1608833044217,"results":"48","hashOfConfig":"39"},{"size":1560,"mtime":1608893287972,"results":"49","hashOfConfig":"39"},{"size":2326,"mtime":1614006841628,"results":"50","hashOfConfig":"39"},{"size":362,"mtime":1606227820515,"results":"51","hashOfConfig":"39"},{"size":545,"mtime":1614090307166,"results":"52","hashOfConfig":"39"},{"size":3542,"mtime":1614253152574,"results":"53","hashOfConfig":"39"},{"size":700,"mtime":1614093029736,"results":"54","hashOfConfig":"39"},{"size":1462,"mtime":1608666669506,"results":"55","hashOfConfig":"39"},{"size":11924,"mtime":1606329663359,"results":"56","hashOfConfig":"39"},{"size":1743,"mtime":1614255243049,"results":"57","hashOfConfig":"39"},{"size":753,"mtime":1608894891124,"results":"58","hashOfConfig":"39"},{"size":3327,"mtime":1614090388508,"results":"59","hashOfConfig":"39"},{"size":67,"mtime":1606836629949,"results":"60","hashOfConfig":"39"},{"size":5665,"mtime":1614243958857,"results":"61","hashOfConfig":"39"},{"size":2282,"mtime":1614089934145,"results":"62","hashOfConfig":"39"},{"size":3042,"mtime":1614258545737,"results":"63","hashOfConfig":"39"},{"size":3295,"mtime":1616064733229,"results":"64","hashOfConfig":"39"},{"size":640,"mtime":1606838742610,"results":"65","hashOfConfig":"39"},{"size":830,"mtime":1614096641836,"results":"66","hashOfConfig":"39"},{"size":3747,"mtime":1616062648768,"results":"67","hashOfConfig":"39"},{"size":3914,"mtime":1614263491748,"results":"68","hashOfConfig":"39"},{"size":2535,"mtime":1614241317355,"results":"69","hashOfConfig":"39"},{"size":526,"mtime":1607257492708,"results":"70","hashOfConfig":"39"},{"size":2953,"mtime":1616062639164,"results":"71","hashOfConfig":"39"},{"size":3487,"mtime":1614267009555,"results":"72","hashOfConfig":"39"},{"size":1095,"mtime":1614262345275,"results":"73","hashOfConfig":"39"},{"size":2275,"mtime":1614262794098,"results":"74","hashOfConfig":"39"},{"size":3323,"mtime":1614264425445,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},"16nmaub",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"79"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"89"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"79"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"79"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"79"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"79"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"79"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"89"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"79"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"79"},"/home/vlad/chaddit-frontend/src/api/api.js",["171","172","173","174"],"import axios from 'axios';\nimport {BASE_URL} from '../CONSTANTS/API_CONSTANTS';\n\nlet instance = axios.create({\n    baseURL: BASE_URL,\n})\n\nexport const threadAPI = {\n    getThreads() {\n        return instance.get(`chaddit/c/search/threads`).then(response => response.data);\n    },\n    getThreadByTopic(topicId) {\n        return instance.get(`chaddit/c/threads`, {\n            headers: {\n                topic_id: topicId\n            }\n        }).then(response => response.data);\n    },\n    searchThread(name) {\n        const params = name ? {query: '\"' + `${name}` + '\"'} : {}\n        return instance.get(`chaddit/c/search/thread`, {params: params}).then(response => response.data);\n    },\n    getThread(threadId) {\n        return instance.get(`chaddit/c/thread/${threadId}`).then(response => response.data);\n    },\n    createThread(topicId, data) {\n        return instance.post(`chaddit/c/thread`, data, {\n            headers: {\n                'api_token': localStorage.getItem('api_token'),\n                'topic_id': topicId,\n            }\n        }).then(response => response.data);\n    }\n}\n\nexport const topicAPI = {\n    getTopics(desc, order ) {\n        const params = desc ? {orderbydesc: order} : {orderby: order};\n        return instance.get(`chaddit/c/topics`, {params: params}).then(response => response.data);\n    },\n    getTopicByTag(tag) {\n        const params = tag ? {query: '\"' + `#${tag}` + '\"'} : {}\n        return instance.get(`chaddit/c/search/topic`, {params: params}).then(response => response.data);\n    },\n    searchTopics(name) {\n        const params = name ? {query: '\"' + name + '\"'} : {}\n        return instance.get(`chaddit/c/search/topic`, {params: params}).then(response => {\n            console.log(response.data)\n            return response.data\n        });\n    },\n    createTopic(title, tags) {\n        console.log('post tags', tags)\n        return axios.post(BASE_URL + `chaddit/c/topic`, {topic_title: title, tags: tags}, {\n            headers: {\n                'api_token': localStorage.getItem('api_token'),\n            }\n        })\n            .then(response => response.data)\n    },\n    deleteTopic(topicId) {\n        return instance.patch(`chaddit/c/topic/${topicId}`, {active: false}).then(response => response.data)\n    },\n    updateTopic(topicId, topic) {\n        return instance.patch(`chaddit/c/topic/${topicId}`, topic, {\n            headers: {\n                'api_token': localStorage.getItem('api_token'),\n            }\n        }).then(response => response.data)\n    },\n\n}\n\nexport const chatAPI = {\n    getChats() {\n        return instance.get(`chaddit/c/chats`, {\n            headers: {\n                'api_token': localStorage.getItem('api_token'),\n            }\n        }).then(response => {\n            return response.data\n        });\n    },\n    getChat(chatId) {\n        return instance.get(`chaddit/c/chat/${chatId}`).then(response => response.data);\n    },\n    createChat() {\n        return instance.post('chaddit/c/chat', {}, {\n            headers: {\n                'api_token': localStorage.getItem('api_token'),\n            }\n        }).then(response => {\n            console.log(response)\n            return response.data\n        })\n    },\n    getMessages(chatId) {\n        return instance.get(`chaddit/c/messages/${chatId}`, {\n            headers: {\n                'api_token': localStorage.getItem('api_token'),\n            },\n            params: {\n                limit: -1\n            }\n        }).then(response => {\n            console.log('message response', response)\n            return response.data\n        });\n    },\n    createMessage(chatId, body) {\n        return instance.post('chaddit/c/message', {body: body}, {\n            headers: {\n                'api_token': localStorage.getItem('api_token'),\n                'chat_id': chatId,\n            }\n        }).then(response => {\n            console.log(response)\n            return response.data\n        })\n\n    }\n\n\n}\n\nexport const loginAPI = {\n    login(email, password) {\n        return instance.post('chaddit/c/login',\n            {user_email: email, user_pass: password})\n    },\n    register(name, email, password) {\n        return instance.post('chaddit/c/register',\n            {user_name: name, user_email: email, user_pass: password}) //\n    }\n}\n\nexport const userAPI = {\n    getUser() {\n        return axios.get(BASE_URL + 'chaddit/c/user', {\n            headers: {\n                'api_token': localStorage.getItem('api_token'),\n            }\n        });\n    },\n    updateName(name) {\n        return axios.patch(`${BASE_URL}chaddit/c/user`,\n            {user_name: name},\n            {\n                headers: {\n                    'api_token': localStorage.getItem('api_token'),\n                }\n            });\n    },\n    updatePass(oldPassword, newPassword) {\n        return axios.patch(BASE_URL + 'chaddit/c/user',\n            {user_pass: newPassword, old_user_pass: oldPassword},\n            {\n                headers: {\n                    'api_token': localStorage.getItem('api_token'),\n\n                }\n            });\n    }\n}\n\nexport const postAPI = {\n    sendPost(newPost) {\n        return axios.post(BASE_URL + `chaddit/c/post`, {body: newPost.body}, {\n            headers: {\n                'api_token': localStorage.getItem('api_token'),\n                'thread_id': newPost.threadId,\n                'post_id': newPost.rootPostId,\n            }\n        })\n            .then(response => response.data)\n    }\n}\n\nexport const adminAPI = {\n    getUsers() {\n        return instance.get('chaddit/c/users', {\n            headers: {\n                'api_token': localStorage.getItem('api_token'),\n            }\n        }).then(response => {\n            console.log(response.data)\n            return response.data\n        })\n    },\n    updateUser(userId, user) {\n        return instance.patch(`chaddit/c/user/${userId}`, user, {\n            headers: {\n                'api_token': localStorage.getItem('api_token'),\n            }\n        }).then(response => response.data)\n    }\n\n\n}\n",["175","176"],"/home/vlad/chaddit-frontend/src/redux/reducers/userReducer.js",[],["177","178"],"/home/vlad/chaddit-frontend/src/components/Feed/Feed.jsx",["179","180"],"import React, {useEffect, useState} from \"react\";\n\nimport Card from \"../Card/Card\";\nimport F from \"./Feed.module.css\";\nimport {cardColorsNum} from \"../../commons/colors\";\nimport {connect, useDispatch} from 'react-redux';\nimport {fetchThreads} from \"../../redux/reducers/threadReducer\";\nimport ActiveCard from \"../ActiveCard/ActiveCard\";\nimport {colorIsLight} from \"../../utils/formatters\";\nimport {setSearchField, setSearchTopicId} from \"../../redux/reducers/searchReducer\";\nimport {THREADS} from \"../../redux/reducers/types\";\nimport AdminThread from \"../ActiveCard/AdminThread\";\n\nconst Feed = (props) => {\n    const dispatch = useDispatch()\n    const [threads, updateThreads] = useState(props.threads);\n\n    useEffect(() => {\n        dispatch(setSearchField(THREADS))\n        dispatch(setSearchTopicId(props.match.params.id))\n        dispatch(fetchThreads(props.match.params.id))\n    }, [])\n\n    useEffect(()=> {\n        updateThreads(props.threads)\n    },[props.threads])\n\n    const [activeCard, setCardStatus] = useState('');\n    const [adminCard, setAdminStatus] = useState('');\n\n    const openCard = (id) => {\n        setCardStatus(id);\n    };\n\n    const closeCard = () => {\n        setCardStatus('');\n    };\n\n    return (\n        <div className={F.feed}>\n            {threads.length === 0 && <h2 className={F.notFound}>Ничего не найдено :( </h2>}\n            {console.log(threads)}\n            {threads.filter(card => card.topic_id === parseInt(props.match.params.id)).map((card, i) => {\n                const color = cardColorsNum[(parseInt(card.thread_id )% (cardColorsNum.length - 1))]\n                const cardProps = {\n                    color: `rgba(${color[0]},${color[1]},${color[2]},${color[3]})`,\n                    isColorLight: colorIsLight(...color),\n                    threadId: card.thread_id,\n                    threadTitle: card.thread_title,\n                    authorId: card.author_id,\n                    createdAt: card.created_at,\n                    preview: card.posts[0].body,\n                    cardId: i.toString(),\n                    openCard: openCard,\n                    closeCard: closeCard,\n                    image: card.image,\n                    views: card.views,\n                    authorName: `${card.author.user_name}#${card.author.user_tag}`\n                }\n                return <Card key={`card${i}`} {...cardProps} />\n            })}\n            {activeCard &&\n            <ActiveCard cardId={activeCard} closeActiveCard={closeCard} info={threads[parseInt(activeCard)]}/>}\n\n            {adminCard && <AdminThread info={threads[parseInt(activeCard)]} />}\n\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    threads: state.threadData.threads,\n    topics: state.topics.topics,\n    isAuth: state.auth.loggedIn,\n})\n\nexport default connect(mapStateToProps)(Feed);\n","/home/vlad/chaddit-frontend/src/components/Card/Card.jsx",["181","182","183"],"import React, {createRef, useEffect} from \"react\";\nimport C from \"./Card.module.css\";\nimport {formatDate} from \"../../utils/formatters\";\nimport cat from '../../icons/cat.png';\n\nfunction Card(props) {\n    const {\n        threadTitle,\n        authorId,\n        createdAt,\n        color,\n        threadId,\n        preview,\n        isColorLight,\n        authorName,\n        image,\n        views,\n    } = props;\n\n    const handleClick = () => {\n        props.openCard(threadId);\n    }\n\n    const previewStyle = () => {\n        return preview.length * 16 > 600 * 2\n    }\n\n    const formatViews = () => {\n        return views ?? 0\n    }\n\n    return (\n        <div\n            style={{\n                height: \"500px\",\n                width: \"600px\",\n                backgroundColor: color,\n                color: isColorLight ? 'black' : '#d0d0d0',\n            }}\n            className={C.card}\n            onClick={handleClick}\n        >\n            <div\n                style={{\n                    backgroundImage: `url(${image ? image : cat})`,\n                    backgroundSize: \"cover\",\n                    borderRadius: \"5px\",\n                }}\n            />\n            <div className={C.cardText}>\n                <h2 className={C.cardTitle}>{threadTitle}</h2>\n                <span className={previewStyle() ?\n                    (isColorLight ? C.cardTextPreviewGradientDark : C.cardTextPreviewGradientLight)\n                    :\n                    (isColorLight ? C.cardTextPreviewLight : C.cardTextPreview)}>{preview}</span>\n                <div className={C.cardFooter}>\n                    <div className={C.authorName} style={{\n                        backgroundColor: isColorLight ? 'black' : 'white',\n                        color: isColorLight ? 'white' : 'black'\n                    }}>Автор: {authorName}</div>\n                    <div className={C.cardDate} style={{\n                        backgroundColor: isColorLight ? 'black' : 'white',\n                        color: isColorLight ? 'white' : 'black'\n                    }}>{formatDate(createdAt)}</div>\n                    <div className={C.cardDate} style={{\n                        backgroundColor: isColorLight ? 'black' : 'white',\n                        color: isColorLight ? 'white' : 'black'\n                    }}>{'views: ' + formatViews()}</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Card;\n",["184","185"],"/home/vlad/chaddit-frontend/src/components/Header/HeaderUtils/CreateThreadWidget/CreateThreadWidget.jsx",["186","187","188","189","190"],"/home/vlad/chaddit-frontend/src/components/ActiveCard/ActiveCard.jsx",["191","192","193","194","195","196"],"import React, {useEffect, useState} from \"react\";\nimport C from \"./ActiveCard.module.css\";\nimport cat from \"../../icons/cat.png\";\nimport {formatDate, formatReplyString} from \"../../utils/formatters\";\nimport ReactDOM from \"react-dom\";\nimport useClickOutside from \"../Header/HeaderUtils/utils\";\nimport {clearThread, fetchThread} from \"../../redux/reducers/threadReducer\";\nimport {connect, useDispatch} from \"react-redux\";\nimport Comment from \"./components/Comment\";\nimport {clearPosts, sendPost, setPosts} from \"../../redux/reducers/postsReducer\";\n\nfunction ActiveCard(props) {\n    const dispatch = useDispatch()\n    const thread = props.thread\n    const currentUserId = props.currentId\n\n    const [replyId, setReplyId] = useState('')\n    const [replyComment, setCurrentReplyComment] = useState('')\n    const [replyText, setReplyText] = useState('')\n    const [posts, setActivePosts] = useState(props.posts)\n    const [responses, setResponses] = useState([])\n\n    let domNode = useClickOutside(() => {\n        dispatch(clearThread());\n        dispatch(clearPosts());\n        props.closeActiveCard();\n    });\n\n    function handleClick(event, postId, body){\n        if(event && event.stopPropagation){\n            event.stopPropagation()\n            chooseCommentId(postId)\n            setCurrentReplyComment(body)\n        }\n    }\n\n\n    useEffect(() => {\n        dispatch(fetchThread(props.cardId))\n    }, [])\n\n    useEffect( () => {\n        if(thread){\n            setReplyId(thread.posts[0].post_id)\n            setCurrentReplyComment(thread.posts[0].body)\n            dispatch(setPosts(thread.posts))\n            setResponses(thread.posts[0].responses)\n        }\n    },[props.thread])\n\n    useEffect(() => {\n        if(posts){\n            setActivePosts([...props.posts])\n        }\n\n    }, [props.posts])\n\n\n\n    const chooseCommentId = id => {\n        setReplyId(id)\n    }\n\n    const handleSubmit = event => {\n        sendNewPost();\n        setReplyText('');\n        event.preventDefault();\n    }\n\n    const sendNewPost = () => {\n        const newPost = {\n            body: replyText,\n            userId: currentUserId,\n            threadId: thread.thread_id,\n            rootPostId: replyId,\n            userName: props.userName,\n        }\n\n        dispatch(sendPost(newPost, replyId));\n    }\n\n    return ReactDOM.createPortal(\n        <div className={props.cardId ? C.darkBackground : C.darkBackgroundHidden}\n        >\n            <div className={C.creatorContainer} ref={domNode}>\n                {thread && <div className={C.creatorGrid}>\n                    <div className={C.activeCard_header}>\n                        <div className={C.userImage}></div>\n                        <div className={C.activeCard_title}>\n                            <h2>{thread.thread_title}</h2>\n                            <div className={C.activeCard_time}>{formatDate(thread.created_at)}</div>\n                        </div>\n                    </div>\n                    <div className={C.commentSection}>\n                        {posts.map((post) =>\n                            <Comment\n                                responses={post.responses}\n                                body={post.body}\n                                userId={post.author_id}\n                                postId={post.post_id}\n                                userName={`${post.author.user_name}#${post.author.user_tag}`}\n                                responsesStatus={true}\n                                handleClick={handleClick}/>)}\n\n                    </div>\n                    <form className={C.activeCardForm} onSubmit={handleSubmit}>\n                        <p className={C.replyToPreview}>{`Replying to: ${replyComment}`}</p>\n                        <textarea className={C.activeCard_createComment}\n                                  placeholder={'Ваше сообщение...'}\n                                  onChange={ e=> setReplyText(e.target.value)}\n                                    value={replyText}/>\n                        <button className={C.activeCard_button} type={\"submit\"}>{'Отправить'}</button>\n                    </form>\n                </div>}\n            </div>\n\n        </div>,\n        document.getElementById(\"portal\")\n    )\n}\n\n\nconst mapStateToProps = (state) => ({\n    thread: state.threadData.thread,\n    posts: state.posts.posts,\n    currentId: state.user.userId,\n    userName: `${state.user.userName}#${state.user.userTag}`\n})\n\nexport default connect(mapStateToProps)(ActiveCard);","/home/vlad/chaddit-frontend/src/App.js",["197"],"import React, {useEffect} from \"react\";\nimport Feed from './components/Feed/Feed';\nimport Header from './components/Header/Header';\nimport Login from './components/Login/Login'\nimport {BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport A from './App.css'\nimport PrivateRoute from \"./hoc/PrivateRoute\";\nimport Topics from \"./components/Topics/Topics\";\nimport {checkToken} from \"./redux/reducers/authReducer\";\nimport {useDispatch} from \"react-redux\";\n\nfunction App() {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        console.log('checking token')\n        dispatch(checkToken())\n    },[])\n\n    return (\n        <BrowserRouter>\n            <div className={A.app}>\n                <Header/>\n                <Route\n                    exact\n                    path=\"/\"\n                    render={() => <Redirect to=\"/topics\" />}\n                />\n                <PrivateRoute exact path={'/topics/:id'} component={Feed}/>\n                <PrivateRoute exact path={'/topics'} component={Topics}/>\n                <Route component={Login}\n                       exact path={'/login'}/>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","/home/vlad/chaddit-frontend/src/redux/reducers/topicReducer.js",[],"/home/vlad/chaddit-frontend/src/redux/reducers/types.js",[],"/home/vlad/chaddit-frontend/src/commons/colors.js",[],"/home/vlad/chaddit-frontend/src/components/ActiveCard/components/Comment.jsx",["198"],"import React, {useEffect, useState} from \"react\";\nimport C from \"../ActiveCard.module.css\"\n\nfunction Comment(props) {\n    const {body, userId, postId, handleClick, userName} = props\n\n    const [responsesStatus, changeResponsesStatus] = useState(props.responsesStatus)\n    const [responses, updateResponses] = useState(props.responses)\n\n    const toggleResponses = () => {\n        changeResponsesStatus(!responsesStatus);\n    }\n    useEffect(() => {\n        updateResponses(props.responses);\n        // changeResponsesStatus(true)\n    }, [props.responses])\n\n    return <div key={`comment_${postId}`}\n                onClick={e => handleClick(e, postId, body)}\n    >\n        <div className={responsesStatus ? C.activeCard_activeComment : C.activeCard_comment}>\n            <div className={C.commentText}>\n                <div className={C.commentUserName}>{userName}</div>\n                <div>{body}</div>\n            </div>\n            {responses.length > 0 && <button className={C.responseButton}\n                     onClick={toggleResponses}>{`${responsesStatus ? 'Спрятать' : 'Показать'} Ответы`}\n            </button>}\n        </div>\n        {responsesStatus && responses && responses.map(post => <Comment\n            body={post.body}\n            responsesStatus={false}\n            responses={post.responses}\n            userId={post.author_id}\n            userName={`${post.author.user_name}#${post.author.user_tag}`}\n            postId={post.post_id}\n            handleClick={handleClick}/>)}\n    </div>\n}\n\nexport default Comment;","/home/vlad/chaddit-frontend/src/redux/reducers/threadReducer.js",[],"/home/vlad/chaddit-frontend/src/reportWebVitals.js",[],["199","200"],"/home/vlad/chaddit-frontend/src/hoc/PrivateRoute.jsx",[],"/home/vlad/chaddit-frontend/src/components/Header/Header.jsx",["201"],"import React, {useEffect, useState} from \"react\";\nimport H from \"./Header.module.css\";\nimport Logo from \"./Logo\";\nimport Search from \"./Search/Search\";\nimport UserSettings from \"./HeaderUtils/UserSettings/UserSettings\";\nimport {connect, useDispatch} from \"react-redux\";\nimport CreateThreadWidget from \"./HeaderUtils/CreateThreadWidget/CreateThreadWidget\";\nimport common from '../../commons/elements.module.css';\nimport {getUser} from \"../../redux/reducers/userReducer\";\nimport userImage from '../../icons/chadnobg.png'\nimport Chats from \"../Chats/Chats\";\nimport Users from \"../Users/Users\";\n\n\nfunction Header(props) {\n    const dispatch = useDispatch()\n\n    const [settingsActive, setSettingsStatus] = useState(false);\n    const [creatorActive, setCreatorStatus] = useState(false);\n    const [chatsActive, setChatsActive] = useState(false);\n    const [usersActive, setUsersActive] = useState(false);\n\n    useEffect(\n        () => {\n            dispatch(getUser());\n        },\n        [props.isAuth],\n    );\n\n    const openSettings = () => {\n        setSettingsStatus(true);\n    };\n\n    const closeSettings = () => {\n        setSettingsStatus(false);\n    };\n\n    const openCreator = () => {\n        setCreatorStatus(true);\n    };\n\n    const closeCreator = () => {\n        setCreatorStatus(false);\n    };\n\n    const openChats = () => {\n        setChatsActive(true)\n    }\n\n    const closeChats = () => {\n        setChatsActive(false)\n    }\n\n    const openUsers = () => {\n        setUsersActive(true)\n    }\n\n    const closeUsers = () => {\n        setUsersActive(false)\n    }\n\n    return (\n        <div className={props.isAuth ? H.header : H.headerGuest}>\n            {props.isAuth && <div className={H.utils}>\n                <div className={H.userImage} style={{\n                    backgroundImage: `url(${userImage})`,\n                    backgroundSize: \"cover\",\n                }} onClick={props.isAuth ? openSettings : null}/>\n                <div className={H.buttons}>\n                <div className={H.userTopicCreator} onClick={props.isAuth ? openCreator : null}>\n                    <button className={common.buttonChad}> Добавить тред </button>\n\n                </div>\n\n                <div className={H.userTopicCreator} onClick={props.isAuth ? openChats : null}>\n                    <button className={common.buttonChad}> Чаты </button>\n\n                </div>\n\n                    {props.userRole === 'ADMIN' && <div className={H.userTopicCreator} onClick={props.isAuth ? openUsers : null}>\n                        <button className={common.buttonChad}> USERS</button>\n\n                    </div>}\n                </div>\n            </div>}\n            <div className={H.logo}>\n                <Logo />\n            </div>\n            {props.isAuth && <div className={H.search}>\n                <Search/>\n            </div>}\n            {props.isAuth && <UserSettings\n                closeSettings={closeSettings}\n                settingsActive={settingsActive}\n            />}\n            {props.isAuth && <CreateThreadWidget\n                creatorActive={creatorActive}\n                closeCreator={closeCreator}/>}\n            {props.isAuth && <Chats chatsActive={chatsActive} closeChats={closeChats}/>}\n            {props.isAuth && <Users usersActive={usersActive} closeUsers={closeUsers}/>}\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    userName: state.user.userName,\n    isAuth: state.auth.loggedIn,\n    userRole: state.user.userRole,\n})\n\n\nexport default connect(mapStateToProps)(Header);\n","/home/vlad/chaddit-frontend/src/redux/store.js",[],"/home/vlad/chaddit-frontend/src/redux/reducers/postsReducer.js",["202"],"import {postAPI} from \"../../api/api\";\nimport {CLEAR_POSTS, SEND_POST, SET_POSTS} from \"./types\";\n\nconst initialState = {\n    posts: [],\n}\n\nfunction updateCommentRating(posts, postId, reply) {\n\n    let temp = [...posts];\n\n    (function func(temp) {\n\n        for (let elem of temp) {\n            if (elem[\"post_id\"] == postId) {\n                elem[\"responses\"] = [...elem[\"responses\"], reply]\n            } else if (elem['responses']) {\n                func(elem['responses']);\n            }\n        }\n\n    })(temp);\n    return temp;\n}\n\nexport const postReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_POSTS:\n            return {\n                ...state,\n                posts: action.posts,\n            }\n        case SEND_POST:\n            return {\n                ...state,\n                posts: updateCommentRating(state.posts, action.parentId, action.post),\n            }\n        case CLEAR_POSTS:\n            return {\n                posts: [],\n            }\n\n        default:\n            return state;\n    }\n\n}\n\nexport const sendPost = (post, parentId) => {\n    return dispatch => {\n        postAPI.sendPost(post)\n            .then(post => dispatch({type: SEND_POST, post: post, parentId: parentId}))\n    }\n}\n\nexport const setPosts = (posts) => (dispatch) => {\n    return dispatch({type: SET_POSTS, posts: posts})\n}\n\nexport const clearPosts = () => (dispatch) => {\n    return dispatch({type: CLEAR_POSTS})\n}\n\n\n","/home/vlad/chaddit-frontend/src/components/Header/Logo.jsx",[],"/home/vlad/chaddit-frontend/src/components/Header/Search/Search.jsx",["203"],"import React, {useState} from \"react\";\nimport S from \"./Search.module.css\";\nimport Icon from \"../../../icons/search.png\";\nimport {fetchThreads, searchThreads} from \"../../../redux/reducers/threadReducer\";\nimport {connect, useDispatch} from \"react-redux\";\nimport {TOPICS} from \"../../../redux/reducers/types\";\nimport {fetchTopics, searchTopics} from \"../../../redux/reducers/topicReducer\";\n\nfunction Search(props) {\n    const dispatch = useDispatch()\n\n    const [searchWord, setSearchWord] = useState('')\n    const handleSubmit = event => {\n        event.preventDefault()\n        if(searchWord){\n            if(props.field === TOPICS){\n                console.log(searchWord)\n                dispatch(searchTopics(searchWord))\n            }else {\n                dispatch(searchThreads(searchWord))\n            }\n        } else {\n            if(props.field === TOPICS){\n                dispatch(fetchTopics())\n            }else {\n                dispatch(fetchThreads(props.topicId))\n            }\n        }\n\n    }\n    return (\n        <form className={S.searchContainer} onSubmit={e => handleSubmit(e)}>\n            <input\n                value={searchWord}\n                onChange={e => setSearchWord(e.target.value)}\n                className={S.searchInput}\n                type=\"text\"\n                placeholder={`Что я могу для Вас найти? ${props.field}`}\n            />\n\n            <button type=\"submit\" class={S.searchButton}>\n                <img className={S.searchIcon} src={Icon}></img>\n            </button>\n        </form>\n        // </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    field: state.search.field,\n    topicId: state.search.topicId,\n})\n\nexport default connect(mapStateToProps)(Search);\n","/home/vlad/chaddit-frontend/src/utils/formatters.js",[],"/home/vlad/chaddit-frontend/src/components/Login/Login.jsx",[],"/home/vlad/chaddit-frontend/src/CONSTANTS/API_CONSTANTS.js",[],"/home/vlad/chaddit-frontend/src/components/Header/HeaderUtils/UserSettings/UserSettings.jsx",["204","205"],"/home/vlad/chaddit-frontend/src/redux/reducers/authReducer.js",[],"/home/vlad/chaddit-frontend/src/components/Topics/Topic/Topic.jsx",["206","207","208","209"],"import React, {useState} from \"react\";\nimport C from \"../../Card/Card.module.css\";\nimport sT from \"./Topic.module.css\";\nimport {formatDate} from \"../../../utils/formatters\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect, useDispatch} from \"react-redux\";\nimport {clearThreads} from \"../../../redux/reducers/threadReducer\";\nimport AdminTopic from \"./AdminTopic\";\n\nfunction Topic(props) {\n    const dispatch = useDispatch()\n    const [chosenTopic, setChosenTopic] = useState(false)\n    const [adminOpen, setAdminOpen] = useState(false)\n    const {\n        topicTitle,\n        topicId,\n        createdAt,\n        color,\n        isColorLight,\n        authorName,\n        image,\n        tags,\n    } = props;\n\n    const handleClick = () => {\n        dispatch(clearThreads())\n        setChosenTopic(true)\n    }\n\n    const handleTagClick = (e, tag) => {\n        console.log('click', tag)\n        props.getTopics(tag)\n        e.stopPropagation()\n    }\n\n    const closeAdminTopic = () => {\n        setAdminOpen(false);\n    }\n\n    const handleChangeTopic = (e) => {\n        setAdminOpen(true)\n        e.stopPropagation()\n    }\n\n\n    return (\n        <>\n            {chosenTopic && <Redirect to={`/topics/${topicId}`}/>}\n            {!chosenTopic && <>\n                <div\n                    style={{\n                        'min-height': \"100px\",\n                        'min-width': '250px',\n                        width: \"23%\",\n                        backgroundColor: color,\n                        color: isColorLight ? 'black' : '#d0d0d0',\n                    }}\n                    className={C.card}\n                    onClick={handleClick}\n                >\n\n                    <div className={sT.adminTopicDelete}>\n                        <h2 className={C.cardTitle}>{topicTitle}</h2>\n                        {(props.userRole === 'ADMIN' || props.userRole === 'MOD') &&\n                        <button className={sT.deleteTopicButton}\n                                 onClick={e => handleChangeTopic(e)}> Изменить</button>}\n                    </div>\n                    <div className={sT.tagList}>{tags.length > 0 && 'Теги:'}{tags.map(tag =>\n                        <div className={isColorLight ? sT.tagLight : sT.tag}\n                             onClick={(e) => handleTagClick(e, tag.tag)}>\n                            {tag.tag}</div>)}\n                    </div>\n                    {/*<div className={C.cardFooter}>*/}\n                    {/*    <div>Автор: {authorName}</div>*/}\n                    {/*    <div className={C.cardDate}>{formatDate(createdAt)}</div>*/}\n                    {/*</div>*/}\n\n                </div>\n                {adminOpen && <AdminTopic topicId={topicId} name={topicTitle} tags={tags} closeTopic={closeAdminTopic} active={adminOpen}/>}\n            </>}\n        </>\n    )\n        ;\n}\n\nconst mapStateToProps = (state) => ({\n    currentId: state.user.userId,\n    chats: state.chats.chats,\n    userRole: state.user.userRole,\n})\n\n\nexport default connect(mapStateToProps)(Topic);\n","/home/vlad/chaddit-frontend/src/components/Topics/Topics.jsx",["210","211","212","213"],"/home/vlad/chaddit-frontend/src/index.js",[],"/home/vlad/chaddit-frontend/src/redux/reducers/searchReducer.js",[],["214","215"],"/home/vlad/chaddit-frontend/src/components/Chats/Chats.jsx",["216","217","218","219"],"import React, {useEffect, useState} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport useClickOutside from \"../Header/HeaderUtils/utils\";\nimport {connect, useDispatch} from \"react-redux\";\nimport CH from './Chats.module.css'\nimport Chat from \"./Chat/Chat\";\nimport {createChat, getChats} from \"../../redux/reducers/chatReducer\";\nimport {setUserName} from \"../../redux/reducers/userReducer\";\n\nconst const_chats = [{id: 1, name: 'kek', topic: 'kok'}, {id: 2, name: 'tinkoff', topic: 'сотку верни'},\n    {\n        id: 3, name: 'Мишаэ', topic: 'флюттер'\n    }, {id: 4, name: 'КУрсач', topic: 'давай завтра'}, {id: 5, name: 'kek', topic: 'kok'}, {\n        id: 6,\n        name: 'kek',\n        topic: 'kok'\n    },\n    {\n        id: 7, name: 'kek', topic: 'kok'\n    }, {id: 8, name: 'kek', topic: 'kok'}, {id: 9, name: 'kek', topic: 'kok'}, {id: 10, name: 'kek', topic: 'kok'},]\n\nfunction Chats(props) {\n\n    const dispatch = useDispatch()\n\n    const [chats, setChats] = useState(props.chats)\n\n    const [chatOpen, setChatOpen] = useState('')\n\n    const [userNames, setUserNames] = useState([])\n\n\n    const deleteChat = (id) => {\n        console.log(id)\n        setChats(chats => chats.filter(chat => {\n            return chat.chat_id !== id\n        }))\n    }\n\n    const openChat = (id, names) => {\n        setChatOpen(id)\n        setUserNames(names)\n    }\n\n    const closeChat = () => {\n        setChatOpen('')\n    }\n\n    const handleCreateChat = () => {\n        dispatch(createChat())\n    }\n\n    useEffect( () => {\n        dispatch(getChats())\n    }, [])\n\n    useEffect( () => {\n        setChats(props.chats)\n    }, [props.chats])\n\n    let domNode = useClickOutside(() => {\n        dispatch(getChats())\n        props.closeChats();\n    });\n\n    return ReactDOM.createPortal(\n        <div className={props.chatsActive ? CH.darkBackground : CH.darkBackgroundHidden}\n        >\n            <div className={CH.creatorContainer} ref={domNode}>\n                {!chatOpen && <div className={CH.chatGrid}>\n                    <div className={CH.chatsHeader}>\n                        <h1>Чаты мои чаты</h1>\n                        <button className={CH.sendButton} onClick={handleCreateChat}> Создать чат </button>\n                    </div>\n                    <div className={CH.chats}>\n                    {chats.map(chat => <ChatElement\n                        name={chat.participants\n                            .map(user => user.user_name)} id={chat.chat_id} topic={chat.topic}\n                                                    deleteChat={deleteChat} openChat={openChat}/>)}\n                    </div>\n                </div>}\n                {chatOpen && <Chat closeChat={closeChat} chatId={chatOpen} names={userNames}/>}\n            </div>\n\n\n        </div>,\n        document.getElementById(\"portal\")\n    )\n}\n\nconst ChatElement = (props) => {\n    const handleDeleteClick = (event) => {\n        props.deleteChat(props.id)\n        event.stopPropagation()\n    }\n\n    const handleOpenChat = () => {\n        props.openChat(props.id, props.name.reduce((acc, curr) => acc ? acc + ' и ' + curr : acc + curr, ''))\n    }\n\n    return (\n        <div className={CH.chatElement} onClick={handleOpenChat}>\n            <div>\n                {console.log(props)}\n                <h3>Комната {props.id}</h3>\n                <h3>{props.name.reduce((acc, curr) => acc ? acc + ' и ' + curr : acc + curr, '')}</h3>\n            </div>\n            {/*<button className={CH.closeButton} onClick={handleDeleteClick}>Delete</button>*/}\n        </div>)\n}\n\n\nconst mapStateToProps = (state) => ({\n    currentId: state.user.userId,\n    chats: state.chats.chats,\n})\n\nexport default connect(mapStateToProps)(Chats);","/home/vlad/chaddit-frontend/src/components/Chats/Chat/Chat.jsx",["220","221","222","223","224"],"import React, {useEffect, useRef, useState} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {connect, useDispatch} from \"react-redux\";\nimport CH from '../Chats.module.css'\nimport {clearMessages, createMessage, getMessages, receiveMessage} from \"../../../redux/reducers/chatReducer\";\nimport io from 'socket.io-client';\nimport {BASE_URL} from \"../../../CONSTANTS/API_CONSTANTS\";\n\nfunction Chat(props) {\n\n    const [socket, setSocket] = useState()\n\n    useEffect(() => {\n        handleSocket();\n    }, []);\n\n    const handleSocket = () => {\n        const lobby = io(BASE_URL);\n        // lobby.on('connect', function (socket){\n        //     console.log('connected to backend');\n        //\n        //     lobby.on('disconnect', function(){\n        //         console.log('disconnected: ', socket);\n        //     });\n        //\n        // });\n        lobby.on('new message', function(msg){\n            // setMessages(messages => [...messages, msg])\n            console.log('new message', msg)\n            console.log('before new message', messages)\n            if(messages.filter(message => message.message_id === msg.message_id).length === 0){\n                dispatch(receiveMessage(msg));\n            }\n        });\n\n    };\n\n\n    const dispatch = useDispatch()\n    const currentId = props.currentId;\n\n    const [inputValue, setInputValue] = useState('')\n    const [messages, setMessages] = useState([])\n\n    const handleChatCLose = () => {\n        setSocket(null)\n        dispatch(clearMessages())\n        props.closeChat()\n    }\n\n    useEffect( () => {\n        console.log('sending get msg')\n        dispatch(getMessages(props.chatId))\n    }, [])\n\n    useEffect( () => {\n        console.log(messages)\n    }, [messages])\n\n    useEffect( () => {\n        console.log('prev messages', props.messages)\n        const uniqueArray = props.messages.filter((msg,index) => {\n            return index === props.messages.findIndex(obj => {\n                return obj.message_id === msg.message_id;\n            });\n        }).sort((a,b) => a.message_id - b.message_id);\n        setMessages(uniqueArray)\n    }, [props.messages])\n\n    const sendMessage = (event) => {\n        event.preventDefault();\n        const messageText = inputValue.trim();\n        if (messageText) {\n            dispatch(createMessage(props.chatId, messageText))\n            // setMessages(messages => [...messages, {author_id: currentId, body: messageText}])\n            setInputValue('')\n        }\n\n    }\n    const lastMessageRef = useRef()\n\n    useEffect(() => {\n        if(lastMessageRef.current){\n            lastMessageRef.current.scrollIntoView({smooth: true})\n        }\n\n    }, [lastMessageRef.current])\n\n    return (\n        <div className={CH.chat}>\n            <div className={CH.chatHeader}>\n                <button className={CH.backButton} onClick={handleChatCLose}>Back</button>\n                <h2>Комната {props.names}</h2>\n            </div>\n            <div className={CH.messageList}>\n                {messages.map((message, index) => {\n                    const lastMessage = messages.length - 1 === index\n                    return <div ref={lastMessage ? lastMessageRef : null}\n                                className={message.author_id === currentId ? CH.myMessage : CH.personMessage}>{message.body}</div>\n                })}\n            </div>\n\n            <form onSubmit={e => sendMessage(e)} className={CH.inputSpace}>\n                <input className={CH.messageInput} placeholder={'Введите ваше сообщение...'}\n                       onChange={e => setInputValue(e.target.value)} value={inputValue}/>\n                <button className={CH.sendButton}>Send</button>\n            </form>\n        </div>\n    )\n}\n\n\nconst mapStateToProps = (state) => ({\n    currentId: state.user.userId,\n    chats: state.chats,\n    messages: state.chats.messages,\n})\n\nexport default connect(mapStateToProps)(Chat);","/home/vlad/chaddit-frontend/src/redux/reducers/chatReducer.js",[],"/home/vlad/chaddit-frontend/src/components/Header/HeaderUtils/utils.js",[],"/home/vlad/chaddit-frontend/src/components/Users/Users.jsx",["225"],"/home/vlad/chaddit-frontend/src/components/Topics/Topic/AdminTopic.jsx",["226","227","228","229","230","231"],"import React, {useEffect, useState} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport useClickOutside from \"../../Header/HeaderUtils/utils\";\nimport {connect, useDispatch} from \"react-redux\";\nimport CH from '../../Chats/Chats.module.css'\nimport AT from './Topic.module.css'\nimport C from \"../../Header/HeaderUtils/CreateThreadWidget/CreateThreadWidget.module.css\";\nimport sT from \"./Topic.module.css\";\nimport {fetchTopics, updateTopic} from \"../../../redux/reducers/topicReducer\";\n\nfunction AdminTopic(props) {\n\n    const dispatch = useDispatch()\n\n    const [chats, setChats] = useState(props.chats)\n\n    const [chatOpen, setChatOpen] = useState('')\n\n    const [topicName, setTopicName] = useState(props.name)\n    const [topicTags, setTopicTags] = useState(props.tags)\n    const [tagField, setTagField] = useState('')\n    const [deletePress, setDeletePress] = useState(false)\n\n\n    const handleDeleteTopic = () => {\n        dispatch(updateTopic(props.topicId, {active:false}))\n        setDeletePress(true);\n    }\n\n    let domNode = useClickOutside(() => {\n        dispatch(fetchTopics())\n        props.closeTopic();\n    });\n\n    const addTag = () => {\n        const tagName = tagField.trim()\n        if (tagName && !tagName.includes('#')) {\n            setTopicTags(tags => [...tags, {tag: tagName}])\n            setTagField('')\n        }\n    }\n\n    const saveTopic = () => {\n        if(topicName.trim())\n        dispatch(updateTopic(props.topicId, {\n            topic_title: topicName.trim(),\n            tags: topicTags\n        }))\n    }\n\n    const deleteTag = (id) => {\n        const newTags = topicTags.map(tag => tag.tag_id === id ? {tag_id: id, tag: ''}: tag)\n        setTopicTags(newTags)\n    }\n\n\n    return ReactDOM.createPortal(\n        <div className={props.active ? CH.darkBackground : CH.darkBackgroundHidden}\n        >\n            {console.log('TAGS', topicTags)}\n            <div className={AT.adminTopic} ref={domNode}>\n                <div className={AT.adminHeader}><h1>topic info</h1>\n                    <div>\n                    <button disabled={deletePress} className={AT.saveButton} onClick={saveTopic}> Сохранить</button>\n                    <button disabled={deletePress} className={AT.deleteTopicButton} onClick={handleDeleteTopic}> Удалить </button>\n                    </div>\n                </div>\n\n                <input disabled={deletePress} className={C.inputCreator} onChange={e => setTopicName(e.target.value)} value={topicName}/>\n                <input disabled={deletePress} className={C.inputCreator}\n                       placeholder={'Введите тег'} value={tagField}\n                       onChange={e => setTagField(e.target.value)}/>\n                <div className={C.tagFormContainer}>\n                    <button  disabled={deletePress} className={C.addTagButton} onClick={addTag}>{'Добавить'}</button>\n\n                </div>\n                <div className={AT.tagsContainer}>{topicTags.map(tag => <Tag tag={tag} deleteTag={deleteTag}/>)}\n                </div>\n\n\n            </div>\n\n\n        </div>,\n        document.getElementById(\"portal\")\n    )\n}\n\nconst Tag = (props) => {\n    const handleClick = () => {\n        props.deleteTag(props.tag.tag_id)\n    }\n    return <div\n        className={C.tag} onClick={handleClick}>{props.tag.tag}</div>\n}\n\nconst mapStateToProps = (state) => ({\n    currentId: state.user.userId,\n    chats: state.chats.chats,\n})\n\nexport default connect(mapStateToProps)(AdminTopic);","/home/vlad/chaddit-frontend/src/redux/reducers/adminReducer.js",["232"],"import {DELETE_USER, SET_USERS, UPDATE_USER} from \"./types\";\nimport {adminAPI} from \"../../api/api\";\n\nconst initialState = {\n    users: [],\n}\nexport const adminReducer = (state=initialState, action) => {\n    switch (action.type) {\n\n        case DELETE_USER:\n            return {\n                ...state,\n\n            }\n        case UPDATE_USER:\n            return {\n                ...state,\n            }\n        case SET_USERS:\n            return {\n                ...state,\n                users: action.users,\n            }\n        case DELETE_USER:\n            return {\n                ...state,\n                users: [...state.users.filter(user => user.user_id !== action.user_id)]\n            }\n\n        default:\n            return {\n                ...state\n            }\n    }\n\n}\n\n\nexport const getUsers = () => (dispatch) => {\n    return adminAPI.getUsers().then(response => dispatch({type:SET_USERS, users: response}))\n}\n\nexport const updateUser = (id, user) => (dispatch) => {\n    return adminAPI.updateUser(id, user).then(response => dispatch({type:UPDATE_USER, user_id: id}))\n}\n\n","/home/vlad/chaddit-frontend/src/components/Users/User/User.jsx",["233","234"],"import React, {useEffect, useRef, useState} from \"react\";\nimport {connect, useDispatch} from \"react-redux\";\nimport AT from '../../Topics/Topic/Topic.module.css';\nimport {getUsers, updateUser} from \"../../../redux/reducers/adminReducer\";\n\nfunction User(props) {\n\n    const dispatch = useDispatch()\n\n    const [userName, setUserName] = useState(props.name)\n    const [userMail, setUserMail] = useState(props.mail)\n    const [userPass, setUserPass] = useState('')\n\n    useEffect(() => {\n        setUserName(props.name);\n        setUserMail(props.mail);\n    }, [props])\n\n    const handleUserDelete = () => {\n\n    }\n\n    const saveUserData = () => {\n        let user = {}\n        if(userName){\n            user.user_name = userName\n        }\n        if(userMail){\n            user.user_email = userMail\n        }\n        if(userPass){\n            user.user_pass = userPass\n        }\n\n        dispatch(updateUser(props.uid, user))\n\n    }\n\n    const handleCloseUser = () => {\n        dispatch(getUsers())\n        props.closeUser()\n    }\n\n\n    return (\n        <div className={AT.adminUser}>\n            <div className={AT.adminHeader}><h1>Информация пользователя</h1>\n                <div>\n                    <button className={AT.saveButton} onClick={saveUserData}> Сохранить</button>\n                    <button className={AT.deleteTopicButton} onClick={handleCloseUser}> Назад </button>\n                </div>\n            </div>\n\n            <label className={AT.userLabel}>Имя пользователя</label>\n            <input className={AT.inputCreator} value={userName} onChange={e => setUserName(e.target.value)}/>\n            <label className={AT.userLabel}>Email пользователя</label>\n            <input className={AT.inputCreator} value={userMail} onChange={e => setUserMail(e.target.value)}/>\n            <label className={AT.userLabel}>Пароль пользователя</label>\n            <input className={AT.inputCreator} value={userPass} type={'password'} onChange={e => setUserPass(e.target.value)}/>\n        </div>\n    )\n}\n\n\nconst mapStateToProps = (state) => ({\n    currentId: state.user.userId,\n    chats: state.chats,\n    messages: state.chats.messages,\n})\n\nexport default connect(mapStateToProps)(User);","/home/vlad/chaddit-frontend/src/components/ActiveCard/AdminThread.jsx",["235","236","237","238","239","240","241"],"import React, {useEffect, useState} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport useClickOutside from \"../Header/HeaderUtils/utils\";\nimport {connect, useDispatch} from \"react-redux\";\nimport CH from '../Chats/Chats.module.css'\nimport AT from '../Topics/Topic/Topic.module.css'\nimport C from \"../Header/HeaderUtils/CreateThreadWidget/CreateThreadWidget.module.css\";\nimport {clearThread} from \"../../redux/reducers/threadReducer\";\nimport {clearPosts} from \"../../redux/reducers/postsReducer\";\n\nfunction AdminThread(props) {\n\n    const dispatch = useDispatch()\n\n    const [chats, setChats] = useState(props.chats)\n\n    const [chatOpen, setChatOpen] = useState('')\n\n    const [topicName, setTopicName] = useState(props.name)\n    const [topicTags, setTopicTags] = useState(props.tags)\n    const [tagField, setTagField] = useState('')\n    const [deletePress, setDeletePress] = useState(false)\n\n\n    // const handleDeleteTopic = () => {\n    //     dispatch(updateTopic(props.topicId, {active:false}))\n    //     setDeletePress(true);\n    // }\n    //\n    // let domNode = useClickOutside(() => {\n    //     dispatch(fetchTopics())\n    //     props.closeTopic();\n    // });\n\n    // const addTag = () => {\n    //     const tagName = tagField.trim()\n    //     if (tagName && !tagName.includes('#')) {\n    //         setTopicTags(tags => [...tags, {tag: tagName}])\n    //         setTagField('')\n    //     }\n    // }\n    //\n    // const saveTopic = () => {\n    //     if(topicName.trim())\n    //         dispatch(updateTopic(props.topicId, {\n    //             topic_title: topicName.trim(),\n    //             tags: topicTags\n    //         }))\n    // }\n    let domNode = useClickOutside(() => {\n        dispatch(clearThread());\n        dispatch(clearPosts());\n        props.closeActiveCard();\n    });\n\n\n    return ReactDOM.createPortal(\n        <div className={props.active ? CH.darkBackground : CH.darkBackgroundHidden}\n        >\n            <div className={AT.adminTopic} ref={domNode}>\n                <div className={AT.adminHeader}><h1>topic info{props.info}</h1>\n                    <div>\n                        <button disabled={deletePress} className={AT.saveButton} > Сохранить</button>\n                        <button disabled={deletePress} className={AT.deleteTopicButton} > Удалить </button>\n                    </div>\n                </div>\n\n                <input disabled={deletePress} className={C.inputCreator} onChange={e => setTopicName(e.target.value)} value={topicName}/>\n                <input disabled={deletePress} className={C.inputCreator}\n                       placeholder={'Введите тег'} value={tagField}\n                       onChange={e => setTagField(e.target.value)}/>\n                <div className={C.tagFormContainer}>\n                    <button  disabled={deletePress} className={C.addTagButton} >{'Добавить'}</button>\n\n                </div>\n                <div className={AT.tagsContainer}>{topicTags.map(tag => <div\n                    className={C.tag}>{tag.tag}</div>)}\n                </div>\n\n\n            </div>\n\n\n        </div>,\n        document.getElementById(\"portal\")\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    currentId: state.user.userId,\n    chats: state.chats.chats,\n})\n\nexport default connect(mapStateToProps)(AdminThread);",{"ruleId":"242","severity":1,"message":"243","line":20,"column":43,"nodeType":"244","messageId":"245","endLine":20,"endColumn":44},{"ruleId":"242","severity":1,"message":"243","line":20,"column":55,"nodeType":"244","messageId":"245","endLine":20,"endColumn":56},{"ruleId":"242","severity":1,"message":"243","line":42,"column":42,"nodeType":"244","messageId":"245","endLine":42,"endColumn":43},{"ruleId":"242","severity":1,"message":"243","line":42,"column":54,"nodeType":"244","messageId":"245","endLine":42,"endColumn":55},{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","replacedBy":"249"},{"ruleId":"246","replacedBy":"250"},{"ruleId":"248","replacedBy":"251"},{"ruleId":"252","severity":1,"message":"253","line":22,"column":8,"nodeType":"254","endLine":22,"endColumn":10,"suggestions":"255"},{"ruleId":"256","severity":1,"message":"257","line":29,"column":23,"nodeType":"258","messageId":"259","endLine":29,"endColumn":37},{"ruleId":"256","severity":1,"message":"260","line":1,"column":16,"nodeType":"258","messageId":"259","endLine":1,"endColumn":25},{"ruleId":"256","severity":1,"message":"261","line":1,"column":27,"nodeType":"258","messageId":"259","endLine":1,"endColumn":36},{"ruleId":"256","severity":1,"message":"262","line":9,"column":9,"nodeType":"258","messageId":"259","endLine":9,"endColumn":17},{"ruleId":"246","replacedBy":"263"},{"ruleId":"248","replacedBy":"264"},{"ruleId":"256","severity":1,"message":"265","line":1,"column":27,"nodeType":"258","messageId":"259","endLine":1,"endColumn":33},{"ruleId":"256","severity":1,"message":"266","line":6,"column":23,"nodeType":"258","messageId":"259","endLine":6,"endColumn":35},{"ruleId":"252","severity":1,"message":"267","line":24,"column":8,"nodeType":"254","endLine":24,"endColumn":10,"suggestions":"268"},{"ruleId":"256","severity":1,"message":"269","line":45,"column":11,"nodeType":"258","messageId":"259","endLine":45,"endColumn":20},{"ruleId":"252","severity":1,"message":"270","line":82,"column":8,"nodeType":"254","endLine":82,"endColumn":26,"suggestions":"271"},{"ruleId":"256","severity":1,"message":"272","line":3,"column":8,"nodeType":"258","messageId":"259","endLine":3,"endColumn":11},{"ruleId":"256","severity":1,"message":"273","line":4,"column":21,"nodeType":"258","messageId":"259","endLine":4,"endColumn":38},{"ruleId":"256","severity":1,"message":"274","line":21,"column":12,"nodeType":"258","messageId":"259","endLine":21,"endColumn":21},{"ruleId":"252","severity":1,"message":"275","line":40,"column":8,"nodeType":"254","endLine":40,"endColumn":10,"suggestions":"276"},{"ruleId":"252","severity":1,"message":"277","line":49,"column":7,"nodeType":"254","endLine":49,"endColumn":21,"suggestions":"278"},{"ruleId":"252","severity":1,"message":"279","line":56,"column":8,"nodeType":"254","endLine":56,"endColumn":21,"suggestions":"280"},{"ruleId":"252","severity":1,"message":"267","line":18,"column":7,"nodeType":"254","endLine":18,"endColumn":9,"suggestions":"281"},{"ruleId":"256","severity":1,"message":"282","line":5,"column":18,"nodeType":"258","messageId":"259","endLine":5,"endColumn":24},{"ruleId":"246","replacedBy":"283"},{"ruleId":"248","replacedBy":"284"},{"ruleId":"252","severity":1,"message":"267","line":27,"column":9,"nodeType":"254","endLine":27,"endColumn":23,"suggestions":"285"},{"ruleId":"286","severity":1,"message":"287","line":15,"column":33,"nodeType":"244","messageId":"288","endLine":15,"endColumn":35},{"ruleId":"289","severity":1,"message":"290","line":42,"column":17,"nodeType":"291","endLine":42,"endColumn":58},{"ruleId":"256","severity":1,"message":"265","line":1,"column":28,"nodeType":"258","messageId":"259","endLine":1,"endColumn":34},{"ruleId":"252","severity":1,"message":"267","line":17,"column":9,"nodeType":"254","endLine":17,"endColumn":23,"suggestions":"292"},{"ruleId":"256","severity":1,"message":"293","line":4,"column":9,"nodeType":"258","messageId":"259","endLine":4,"endColumn":19},{"ruleId":"256","severity":1,"message":"294","line":17,"column":9,"nodeType":"258","messageId":"259","endLine":17,"endColumn":18},{"ruleId":"256","severity":1,"message":"295","line":20,"column":9,"nodeType":"258","messageId":"259","endLine":20,"endColumn":19},{"ruleId":"256","severity":1,"message":"296","line":21,"column":9,"nodeType":"258","messageId":"259","endLine":21,"endColumn":14},{"ruleId":"256","severity":1,"message":"297","line":6,"column":8,"nodeType":"258","messageId":"259","endLine":6,"endColumn":18},{"ruleId":"256","severity":1,"message":"298","line":18,"column":12,"nodeType":"258","messageId":"259","endLine":18,"endColumn":17},{"ruleId":"252","severity":1,"message":"299","line":26,"column":8,"nodeType":"254","endLine":26,"endColumn":10,"suggestions":"300"},{"ruleId":"252","severity":1,"message":"267","line":42,"column":8,"nodeType":"254","endLine":42,"endColumn":13,"suggestions":"301"},{"ruleId":"246","replacedBy":"302"},{"ruleId":"248","replacedBy":"303"},{"ruleId":"256","severity":1,"message":"304","line":8,"column":9,"nodeType":"258","messageId":"259","endLine":8,"endColumn":20},{"ruleId":"256","severity":1,"message":"305","line":10,"column":7,"nodeType":"258","messageId":"259","endLine":10,"endColumn":18},{"ruleId":"252","severity":1,"message":"267","line":55,"column":8,"nodeType":"254","endLine":55,"endColumn":10,"suggestions":"306"},{"ruleId":"256","severity":1,"message":"307","line":92,"column":11,"nodeType":"258","messageId":"259","endLine":92,"endColumn":28},{"ruleId":"256","severity":1,"message":"308","line":2,"column":8,"nodeType":"258","messageId":"259","endLine":2,"endColumn":16},{"ruleId":"256","severity":1,"message":"309","line":11,"column":12,"nodeType":"258","messageId":"259","endLine":11,"endColumn":18},{"ruleId":"252","severity":1,"message":"310","line":15,"column":8,"nodeType":"254","endLine":15,"endColumn":10,"suggestions":"311"},{"ruleId":"252","severity":1,"message":"312","line":54,"column":8,"nodeType":"254","endLine":54,"endColumn":10,"suggestions":"313"},{"ruleId":"252","severity":1,"message":"314","line":87,"column":8,"nodeType":"254","endLine":87,"endColumn":32,"suggestions":"315"},{"ruleId":"252","severity":1,"message":"267","line":41,"column":8,"nodeType":"254","endLine":41,"endColumn":10,"suggestions":"316"},{"ruleId":"256","severity":1,"message":"261","line":1,"column":16,"nodeType":"258","messageId":"259","endLine":1,"endColumn":25},{"ruleId":"256","severity":1,"message":"317","line":8,"column":8,"nodeType":"258","messageId":"259","endLine":8,"endColumn":10},{"ruleId":"256","severity":1,"message":"318","line":15,"column":12,"nodeType":"258","messageId":"259","endLine":15,"endColumn":17},{"ruleId":"256","severity":1,"message":"319","line":15,"column":19,"nodeType":"258","messageId":"259","endLine":15,"endColumn":27},{"ruleId":"256","severity":1,"message":"320","line":17,"column":12,"nodeType":"258","messageId":"259","endLine":17,"endColumn":20},{"ruleId":"256","severity":1,"message":"321","line":17,"column":22,"nodeType":"258","messageId":"259","endLine":17,"endColumn":33},{"ruleId":"322","severity":1,"message":"323","line":24,"column":9,"nodeType":"324","messageId":"288","endLine":28,"endColumn":14},{"ruleId":"256","severity":1,"message":"265","line":1,"column":27,"nodeType":"258","messageId":"259","endLine":1,"endColumn":33},{"ruleId":"256","severity":1,"message":"325","line":19,"column":11,"nodeType":"258","messageId":"259","endLine":19,"endColumn":27},{"ruleId":"256","severity":1,"message":"261","line":1,"column":16,"nodeType":"258","messageId":"259","endLine":1,"endColumn":25},{"ruleId":"256","severity":1,"message":"318","line":15,"column":12,"nodeType":"258","messageId":"259","endLine":15,"endColumn":17},{"ruleId":"256","severity":1,"message":"319","line":15,"column":19,"nodeType":"258","messageId":"259","endLine":15,"endColumn":27},{"ruleId":"256","severity":1,"message":"320","line":17,"column":12,"nodeType":"258","messageId":"259","endLine":17,"endColumn":20},{"ruleId":"256","severity":1,"message":"321","line":17,"column":22,"nodeType":"258","messageId":"259","endLine":17,"endColumn":33},{"ruleId":"256","severity":1,"message":"326","line":20,"column":23,"nodeType":"258","messageId":"259","endLine":20,"endColumn":35},{"ruleId":"256","severity":1,"message":"327","line":22,"column":25,"nodeType":"258","messageId":"259","endLine":22,"endColumn":39},"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-native-reassign",["328"],"no-negated-in-lhs",["329"],["328"],["329"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props.match.params.id'. Either include them or remove the dependency array.","ArrayExpression",["330"],"no-unused-vars","'setAdminStatus' is assigned a value but never used.","Identifier","unusedVar","'createRef' is defined but never used.","'useEffect' is defined but never used.","'authorId' is assigned a value but never used.",["328"],["329"],"'useRef' is defined but never used.","'fetchThreads' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["331"],"'removeTag' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'filebyteArray', 'props', 'threadName', and 'threadText'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["332"],"'cat' is defined but never used.","'formatReplyString' is defined but never used.","'responses' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props.cardId'. Either include them or remove the dependency array.",["333"],"React Hook useEffect has missing dependencies: 'dispatch' and 'thread'. Either include them or remove the dependency array.",["334"],"React Hook useEffect has a missing dependency: 'posts'. Either include it or remove the dependency array.",["335"],["336"],"'userId' is assigned a value but never used.",["328"],["329"],["337"],"eqeqeq","Expected '===' and instead saw '=='.","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["338"],"'formatDate' is defined but never used.","'createdAt' is assigned a value but never used.","'authorName' is assigned a value but never used.","'image' is assigned a value but never used.","'ActiveCard' is defined but never used.","'order' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'props.history', and 'tag'. Either include them or remove the dependency array.",["339"],["340"],["328"],["329"],"'setUserName' is defined but never used.","'const_chats' is assigned a value but never used.",["341"],"'handleDeleteClick' is assigned a value but never used.","'ReactDOM' is defined but never used.","'socket' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleSocket'. Either include it or remove the dependency array.",["342"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.chatId'. Either include them or remove the dependency array.",["343"],"React Hook useEffect has an unnecessary dependency: 'lastMessageRef.current'. Either exclude it or remove the dependency array. Mutable values like 'lastMessageRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["344"],["345"],"'sT' is defined but never used.","'chats' is assigned a value but never used.","'setChats' is assigned a value but never used.","'chatOpen' is assigned a value but never used.","'setChatOpen' is assigned a value but never used.","no-duplicate-case","Duplicate case label.","SwitchCase","'handleUserDelete' is assigned a value but never used.","'setTopicTags' is assigned a value but never used.","'setDeletePress' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"348","fix":"358"},{"desc":"359","fix":"360"},{"desc":"359","fix":"361"},{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"348","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"348","fix":"373"},"Update the dependencies array to be: [dispatch, props.match.params.id]",{"range":"374","text":"375"},"Update the dependencies array to be: [dispatch]",{"range":"376","text":"377"},"Update the dependencies array to be: [dispatch, filebyteArray, props, props.newTopicId, threadName, threadText]",{"range":"378","text":"379"},"Update the dependencies array to be: [dispatch, props.cardId]",{"range":"380","text":"381"},"Update the dependencies array to be: [dispatch, props.thread, thread]",{"range":"382","text":"383"},"Update the dependencies array to be: [posts, props.posts]",{"range":"384","text":"385"},{"range":"386","text":"377"},"Update the dependencies array to be: [dispatch, props.isAuth]",{"range":"387","text":"388"},{"range":"389","text":"388"},"Update the dependencies array to be: [dispatch, props.history, tag]",{"range":"390","text":"391"},"Update the dependencies array to be: [dispatch, tag]",{"range":"392","text":"393"},{"range":"394","text":"377"},"Update the dependencies array to be: [handleSocket]",{"range":"395","text":"396"},"Update the dependencies array to be: [dispatch, props.chatId]",{"range":"397","text":"398"},"Update the dependencies array to be: []",{"range":"399","text":"400"},{"range":"401","text":"377"},[888,890],"[dispatch, props.match.params.id]",[1008,1010],"[dispatch]",[2456,2474],"[dispatch, filebyteArray, props, props.newTopicId, threadName, threadText]",[1402,1404],"[dispatch, props.cardId]",[1668,1682],"[dispatch, props.thread, thread]",[1789,1802],"[posts, props.posts]",[614,616],[984,998],"[dispatch, props.isAuth]",[625,639],[968,970],"[dispatch, props.history, tag]",[1267,1272],"[dispatch, tag]",[1548,1550],[506,508],"[handleSocket]",[1650,1652],"[dispatch, props.chatId]",[2651,2675],"[]",[1099,1101]]